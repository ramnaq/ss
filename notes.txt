Sorter: apenas possibilidade de receber um parâmetro fixo ou pode ser rules=None?
	Sorter.sort() deve receber uma lista, para decidir qual fazer o sorting, precisa verificar se possui regras
		se precisa verificar, então não precisa da primeira verificação no construtor


Processo de implementar a soluçaõ completa, considerando qualquer regra.
Possibilidades: Strategy, Chain of Responsability.
Implementação inicial: chamar funções a partir da string da regra do arquivo de configuração através de um
dicionario que mapeia cada nome de função à própria função.
PROBLEMA: ordenação por título está funcionando, pois o dicionário de livros possui as chaves como os títulos dos livros.
E para ordenar os autores? É usado o método sorted(authors), mas para devolver os livros na ordem certa?

Possibilidades: método que retorna um dicionário de Books com as chaves sendo o parâmetro personalizado (título, autor ou edição)
	-Classe BookList que possui tal método.
	-Ficou agora mais claro que o padrão Strategy é realmente adequado, pois cada estratégia diferente possuirá um dicionário
	com as chaves sendo o parâmetro que ela ordena.

	Context e Strategy:
		passar dados por parâmetro (decoupled, mas talvez parâmetros não necessários)
		passar itself como parâmetro
		Strategy manter uma referência a Context, sem necessidade de receber nada como parâmetro, chamando apenas o necessário, contudo
			Context precisa ter uma interface melhor definida (coupled)
		ESCOLHA: passar por parâmetro, isso foi percebido início da implementação do Context. Como os parâmetros são dois, então
		eles já podem ser passados direto. Também porque um dos parâmetros é criado já fora do Context.
		Foi decidido ele ser criado fora do Context pois ele independe de qualquer estado.

	Strategy não pdoe ser implementada como template porque ela não é escolhida em compile time, e também pode mudar em runtime


